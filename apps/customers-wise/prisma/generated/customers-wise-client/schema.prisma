// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./generated/customers-wise-client"
}

datasource db {
  provider = "mongodb"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId], name: "provider_providerAccountId")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Organization {
  id                       String                    @id @default(auto()) @map("_id") @db.ObjectId
  name                     String
  description              String?
  phone                    String?
  stripeCustomerId         String?
  stripeSubscriptionId     String?
  stripeSubscriptionStatus StripeSubscriptionStatus?
  memberIDs                String[]                  @db.ObjectId
  members                  Membership[]
  reviews                  Review[]
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  user                     User?
}

enum MembershipRole {
  OWNER
  ADMIN
  MEMBER
}

model Membership {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  user           User           @relation(fields: [userId], references: [id])
  organization   Organization   @relation(fields: [organizationId], references: [id])
  userId         String         @db.ObjectId
  organizationId String         @db.ObjectId
  role           MembershipRole
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model User {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?       @unique
  emailVerified  DateTime?
  image          String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?       @unique @db.ObjectId
  organizations  Membership[]
  accounts       Account[]
  sessions       Session[]
}

enum StripeSubscriptionStatus {
  incomplete
  incomplete_expired
  trialing
  active
  past_due
  canceled
  unpaid
}

model StripeEvent {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  stripeId         String   @unique
  api_version      String?
  data             Json
  request          Json?
  type             String
  object           String
  account          String?
  created          DateTime
  livemode         Boolean
  pending_webhooks Int
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Location {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  organizationId String
  name           String
  description    String?
  address        String?
  city           String?
  state          String?
  zip            String?
  phone          String?
  email          String?
  website        String?
  latitude       Float?
  longitude      Float?
  reviews        Review[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Link {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String?
  organizationId String
  locationId     String
  reviews        Review[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Review {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  rating         Int
  comment        String?
  phone          String?
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @db.ObjectId
  location       Location     @relation(fields: [locationId], references: [id])
  locationId     String       @db.ObjectId
  link           Link         @relation(fields: [linkId], references: [id])
  linkId         String       @db.ObjectId
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}
