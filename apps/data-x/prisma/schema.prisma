// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum StripeSubscriptionStatus {
    incomplete
    incomplete_expired
    trialing
    active
    past_due
    canceled
    unpaid
}

model User {
    id                       String                    @id @default(auto()) @map("_id") @db.ObjectId
    name                     String?
    email                    String?                   @unique
    emailVerified            DateTime?
    stripeCustomerId         String?
    stripeSubscriptionId     String?
    stripeSubscriptionItemId String?
    stripeSubscriptionStatus StripeSubscriptionStatus?
    exportCredits            Int                       @default(0)
    searchMax                Int                       @default(10)
    image                    String?
    lists                    List[]
    stages                   Stage[]
    accounts                 Account[]
    sessions                 Session[]
}

model List {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String   @db.ObjectId
    name        String
    description String?
    dataIDs     String[] @db.ObjectId
    data        Data[]   @relation(fields: [dataIDs], references: [id])
}

model Stage {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String   @db.ObjectId
    name        String
    description String?
    dataIDs     String[] @db.ObjectId
    data        Data[]   @relation(fields: [dataIDs], references: [id])
}

model StripeEvent {
    id               String   @id @default(auto()) @map("_id") @db.ObjectId
    stripeId         String   @unique
    api_version      String?
    data             Json
    request          Json?
    type             String
    object           String
    account          String?
    created          DateTime
    livemode         Boolean
    pending_webhooks Int
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum DataType {
    onlineStore
    company
}

// model for different types of data, companies, contacts, users, jobs
model Data {
    id                   String   @id @default(auto()) @map("_id") @db.ObjectId
    type                 DataType
    nameAr               String?
    nameEn               String?
    maroofId             Int?     @unique
    maroofUrl            String?  @unique
    maroofBusinessTypeId Int?
    activeStatus         Int?
    description          String?
    website              String?
    instagram            String?
    twitter              String?
    facebook             String?
    telegram             String?
    telephoneNumber      String?
    phoneNumber          String?
    email                String?
    whatsApp             String?
    googleStore          String?
    appleStore           String?
    descriptionAr        String?
    descriptionSummary   String?
    maroofTypeName       String?
    maroofMainImageUrl   String?
    maroofCRNumber       String?
    maroofActiveStatus   Int?
    maroofStampImage     String?
    rating               String?
    maroofRatingNum      String?
    listIDs              String[] @db.ObjectId
    lists                List[]   @relation(fields: [listIDs], references: [id])
    stageIDs             String[] @db.ObjectId
    stages               Stage[]  @relation(fields: [stageIDs], references: [id])
}
