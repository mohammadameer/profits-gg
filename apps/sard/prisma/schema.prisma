// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider          = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url               = env("DATABASE_URL") // uses connection pooling
    directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
    shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Category {
    id               String     @id @default(cuid())
    name             String     @unique
    stories          Story[]
    subCategories    Category[] @relation("SubCategories")
    parentCategories Category[] @relation("SubCategories")
    createdAt        DateTime   @default(now())
    updatedAt        DateTime   @updatedAt
}

model Story {
    id          String     @id @default(cuid())
    account     Account?   @relation(fields: [accountId], references: [id], onDelete: SetNull)
    accountId   String?
    prepation   String?
    title       String?    @unique
    description String?
    slug        String?    @unique
    mainImage   String?
    smallImage  String?
    place       String?
    imagePrompt String?
    content     String?
    categories  Category[]
    age         Int?
    wordCount   Int?
    language    String?
    version     Int?
    hidden      Boolean    @default(true)
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    stories           Story[]
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                   String    @id @default(cuid())
    name                 String?
    email                String?   @unique
    phoneNumber          String?   @unique
    stripeCustomerId     String?
    membershipExpiration DateTime?
    emailVerified        DateTime?
    image                String?
    accounts             Account[]
    sessions             Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model StripeEvent {
    id               String   @id @default(cuid())
    stripeId         String   @unique
    api_version      String?
    data             Json
    request          Json?
    type             String
    object           String
    account          String?
    created          DateTime
    livemode         Boolean
    pending_webhooks Int
}
